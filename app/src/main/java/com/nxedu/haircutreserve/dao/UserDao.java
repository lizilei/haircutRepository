package com.nxedu.haircutreserve.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nxedu.haircutreserve.bean.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Tel = new Property(2, String.class, "tel", false, "TEL");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Gender = new Property(4, String.class, "gender", false, "GENDER");
        public final static Property Usericon = new Property(5, String.class, "usericon", false, "USERICON");
        public final static Property Userstate = new Property(6, String.class, "userstate", false, "USERSTATE");
        public final static Property Usersignature = new Property(7, String.class, "usersignature", false, "USERSIGNATURE");
        public final static Property Idcard = new Property(8, String.class, "idcard", false, "IDCARD");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"TEL\" TEXT," + // 2: tel
                "\"NICKNAME\" TEXT," + // 3: nickname
                "\"GENDER\" TEXT," + // 4: gender
                "\"USERICON\" TEXT," + // 5: usericon
                "\"USERSTATE\" TEXT," + // 6: userstate
                "\"USERSIGNATURE\" TEXT," + // 7: usersignature
                "\"IDCARD\" TEXT);"); // 8: idcard
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(3, tel);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
 
        String usericon = entity.getUsericon();
        if (usericon != null) {
            stmt.bindString(6, usericon);
        }
 
        String userstate = entity.getUserstate();
        if (userstate != null) {
            stmt.bindString(7, userstate);
        }
 
        String usersignature = entity.getUsersignature();
        if (usersignature != null) {
            stmt.bindString(8, usersignature);
        }
 
        String idcard = entity.getIdcard();
        if (idcard != null) {
            stmt.bindString(9, idcard);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(3, tel);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
 
        String usericon = entity.getUsericon();
        if (usericon != null) {
            stmt.bindString(6, usericon);
        }
 
        String userstate = entity.getUserstate();
        if (userstate != null) {
            stmt.bindString(7, userstate);
        }
 
        String usersignature = entity.getUsersignature();
        if (usersignature != null) {
            stmt.bindString(8, usersignature);
        }
 
        String idcard = entity.getIdcard();
        if (idcard != null) {
            stmt.bindString(9, idcard);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gender
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // usericon
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userstate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // usersignature
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // idcard
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGender(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUsericon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserstate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUsersignature(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIdcard(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
